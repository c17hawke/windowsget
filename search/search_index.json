{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"windowsget: python cli template","text":""},{"location":"#introduction","title":"Introduction","text":"<ul> <li><code>windowsget</code> is a Python-based command-line interface (CLI) utility that can be used to download files from the internet on Windows operating system.</li> <li> <p>It is designed to be similar to the <code>wget</code> command in Linux. The syntax for using <code>windowsget</code> is as follows:</p> <pre><code>windowsget &lt;url&gt; -o &lt;output file path&gt;\n</code></pre> </li> <li> <p>Here, <code>&lt;url&gt;</code> is the URL of the file you want to download.</p> </li> <li> <p><code>&lt;output file path&gt;</code> is the path where you want to save the downloaded file. The <code>-o</code> option specifies the output file path.</p> </li> <li> <p>For example, to download a file from <code>https://example.com/file.zip</code> and save it to <code>newfile.zip</code>, you would use the following command:</p> <pre><code>windowsget https://example.com/file.zip -o newfile.zip\n</code></pre> </li> <li> <p><code>windowsget</code> supports various other options such as <code>-h</code> (help). You can see the full list of options and their descriptions by running windowsget <code>-h</code> or windowsget <code>--help</code>.</p> </li> </ul> <p>NOTE: <code>windowsget</code> requires Python 3.x to be installed on your system in order to run.</p>"},{"location":"#setup-","title":"SETUP -","text":""},{"location":"#step-01-create-new-repository-using-this-template","title":"STEP 01: Create new repository using this template","text":"<p>by choosing this as a project template while creating a new repository</p>"},{"location":"#step-02-clone-the-new-repository-or-use-codespaces","title":"STEP 02: Clone the new repository or use codespaces","text":"<ul> <li> <p>To clone you can use the following command -</p> <pre><code>git clone https://github.com/c17hawke/&lt;repo-name&gt;\n</code></pre> </li> </ul> <p>NOTE: update the repo-name here</p> <ul> <li>Click on create code spaces or select available codespaces.</li> </ul>"},{"location":"#step-03-important-create-env-file-in-the-root-of-the-project-and-paste-the-following-content-","title":"STEP 03: IMPORTANT: Create <code>.env</code> file in the root of the project and paste the following content -","text":"<pre><code># update the following values as per your project\nPROJECT_NAME=&lt;PROJECT_NAME&gt;\nREPO_NAME=&lt;REPO_NAME&gt;\nAUTHOR_USER_NAME=&lt;AUTHOR_USER_NAME&gt;\nAUTHOR_NAME=&lt;AUTHOR_NAME&gt;\nPACKAGE_NAME=&lt;PACKAGE_NAME&gt;\nAUTHOR_EMAIL=&lt;AUTHOR_EMAIL&gt;\nCOMMAND_NAME=${PACKAGE_NAME} # update as per your need, Here it is assumed that command name is package name\nSITE_AUTHOR=${AUTHOR_USER_NAME} # update as per your need, Here it is assumed that site author is author user name\nGITHUB_USER_NAME=${AUTHOR_USER_NAME} # update as per your need, Here it is assumed that github user name is author user name\nPYTHON_VERSION=&lt;PYTHON_VERSION&gt;  YEAR=&lt;YEAR&gt;\n</code></pre> <p>WARNING: if this step is skipped then exception will be raised</p>"},{"location":"#step-04-run-the-templatepy-file","title":"STEP 04: Run the template.py file","text":"<p>NOTE: make sure you have dotenv installed before running the following command. To install it simply run the following command -</p> <pre><code>pip install python-dotenv\n</code></pre> <p>use template.py to create the other required files by running the following command -</p> <pre><code>python template.py\n</code></pre>"},{"location":"#step-05-add-a-license-file","title":"STEP 05: Add a <code>LICENSE</code> file","text":"<ul> <li>Go to your github repository and click on <code>Add file</code> and then select <code>Create new file</code>.</li> <li>Now start typing the name of the file as <code>LICENSE</code> and then you'll see the option of selecting the desired template.</li> </ul> <p>NOTE: You can choose MIT License if you are not sure.</p> <p>This completes the basic skeleton of the project!!</p>"},{"location":"#step-06-create-and-install-dependencies-","title":"STEP 06: Create and install dependencies -","text":"<ul> <li> <p>It is assumed that <code>anaconda</code> or <code>miniconda</code> is intalled in the system. If not then please do your setup by following this tutorial - How to do the basic setup for any python, ML, DL, projects on windows10 or 11?</p> </li> <li> <p>Update the <code>requirements_dev.txt</code> and <code>requirements.txt</code> files with the project requirements (i.e. required libraries)</p> </li> <li> <p>Now run the <code>init_setup.sh</code> file by running the following command -</p> <pre><code>bash init_setup.sh   </code></pre> </li> </ul> <p>NOTE: if in case you face difficulty in running the init_setup.sh file then you can run the command mentioned in it one by one in the terminal to get the same result.</p> <p>This completes the environment setup of the project!!</p>"},{"location":"#step-07-now-you-can-start-the-development-by-activating-the-environment","title":"STEP 07: Now you can start the development by activating the environment","text":"<ul> <li> <p>To activate the environment run the following command -</p> <pre><code>conda activate ./env\n</code></pre> </li> </ul>"},{"location":"#create-dockerfile-for-running-tox-test-locally-","title":"Create Dockerfile for running tox test locally -","text":"<ul> <li> <p>Create a Dockerfile in your project directory with the following contents:</p> <pre><code>FROM python:3.8\n# Install necessary packages\nRUN apt-get update &amp;&amp; \\\napt-get install -y git &amp;&amp; \\\npip install tox\n\n# Set working directory\nWORKDIR /app\n# Copy the project files into the container\nCOPY . /app\n\n# Run tox\nCMD [\"tox\"]\n</code></pre> </li> <li> <p>Build the Docker image by running the following command in your project directory:</p> </li> </ul> <pre><code>docker build -t myproject .\n</code></pre> <ul> <li>Run tox inside a container using the Docker image by running the following command:</li> </ul> <pre><code>docker run -it --rm myproject\n</code></pre> <p>NOTE: The above two commands should be executed again if you update the code.</p> <ul> <li>If you want to persist data between container runs (such as test results or code coverage reports), you can use Docker volumes to mount directories inside the container to directories on your local machine. For example:</li> </ul> <pre><code>docker run -it --rm -v $(pwd)/results:/app/results myproject\n</code></pre> <p>This will mount the results directory inside the container to a directory named results in your current working directory on the host machine, allowing you to save test results or other data outside the container.</p>"}]}